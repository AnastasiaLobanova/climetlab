name: Check and publish

on:
  # push:
  #  branches: [ master ]

  workflow_dispatch: {}

  pull_request:
    branches: [master]

  release:
    types: [created]

  repository_dispatch:
    types:
      - cdsapi-updated
      - magics-python-updated
      - ecmwf-api-client-updated

jobs:
  checks:
    strategy:
      fail-fast: false
      matrix:
        platform: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.6", "3.7", "3.8", "3.9"]

    name: Python ${{ matrix.python-version }} on ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install packages
        run: |
          pip install black sphinx pytest pytest-cov flake8 isort
          pip install -r docs/requirements.txt
      # sudo apt-get install pandoc

      - name: Code QA
        run: |
          black --version
          isort --check --profile=black .
          black --check .
          flake8 .

      - name: Tokens
        shell: python
        env:
          ECMWFAPIRC: ${{ secrets.ECMWFAPIRC }}
          CDSAPIRC: ${{ secrets.CDSAPIRC }}

        run: |
          import os
          for n in ('ECMWFAPIRC', 'CDSAPIRC'):
              m = os.path.expanduser("~/." + n.lower())
              if os.environ[n]:
                  with open(m, "w") as f:
                      print(os.environ[n], file=f)

      - name: Tests
        run: |
          python setup.py develop
          pip freeze
          pytest
        env:
          CLIMETLAB_DEBUG: 1

      - name: Documentation
        if: 'false'
        run: |
          make clean
          make html
          # make linkcheck (don't run yet)
        working-directory: docs

  deploy:
    if: ${{ github.event_name == 'release' }}

    name: Upload to Pypi
    needs: checks

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Check version
        run: |
          release=${GITHUB_REF##*/}
          version=$(python setup.py --version)
          test "$release" == "$version"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist
          twine upload dist/*
